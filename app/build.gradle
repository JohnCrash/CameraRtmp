apply plugin: 'com.android.model.application'

def ffmpeg_path='D:/source/ffmpeg-lf/android/armeabi'

model {
    repositories{
        libs(PrebuiltLibraries){
            ffmpeg{
                binaries.withType(SharedLibraryBinary){
                    sharedLibraryFile = file("./src/main/libs/${targetPlatform.getName()}/libCameraRtmp.so")
                }
            }
        }
    }
    repositories{
        libs(PrebuiltLibraries){
            avutil{
                headers.srcDir "${ffmpeg_path}/include"
                binaries.withType(StaticLibraryBinary){
                    staticLibraryFile = file("${ffmpeg_path}/lib/${targetPlatform.getName()}/libavutil.a")
                }
            }
        }
    }
    repositories{
        libs(PrebuiltLibraries){
            avcodec{
                headers.srcDir "${ffmpeg_path}/include"
                binaries.withType(StaticLibraryBinary){
                    staticLibraryFile = file("${ffmpeg_path}/lib/${targetPlatform.getName()}/libavcodec.a")
                }
            }
        }
    }
    repositories{
        libs(PrebuiltLibraries){
            avformat{
                headers.srcDir "${ffmpeg_path}/include"
                binaries.withType(StaticLibraryBinary){
                    staticLibraryFile = file("${ffmpeg_path}/lib/${targetPlatform.getName()}/libavformat.a")
                }
            }
        }
    }
    repositories{
        libs(PrebuiltLibraries){
            avdevice{
                headers.srcDir "${ffmpeg_path}/include"
                binaries.withType(StaticLibraryBinary){
                    staticLibraryFile = file("${ffmpeg_path}/lib/${targetPlatform.getName()}/libavdevice.a")
                }
            }
        }
    }
    repositories{
        libs(PrebuiltLibraries){
            avfilter{
                headers.srcDir "${ffmpeg_path}/include"
                binaries.withType(StaticLibraryBinary){
                    staticLibraryFile = file("${ffmpeg_path}/lib/${targetPlatform.getName()}/libavfilter.a")
                }
            }
        }
    }
    repositories{
        libs(PrebuiltLibraries){
            swresample{
                headers.srcDir "${ffmpeg_path}/include"
                binaries.withType(StaticLibraryBinary){
                    staticLibraryFile = file("${ffmpeg_path}/lib/${targetPlatform.getName()}/libswresample.a")
                }
            }
        }
    }
    repositories{
        libs(PrebuiltLibraries){
            swscale{
                headers.srcDir "${ffmpeg_path}/include"
                binaries.withType(StaticLibraryBinary){
                    staticLibraryFile = file("${ffmpeg_path}/lib/${targetPlatform.getName()}/libswscale.a")
                }
            }
        }
    }
    android {
        compileSdkVersion = 23
        buildToolsVersion = '23.0.0'

        defaultConfig {
            applicationId = 'com.example.wesnoth.camerartmp'
            minSdkVersion.apiLevel = 10
            targetSdkVersion.apiLevel 23
            versionCode = 1
            versionName = '1.0'
        }
        sources {
            main {
                jni {
                    dependencies {
                        library 'ffmpeg' linkage 'shared'
                    }
                }
                jniLibs {
                    // for shared lib, lib need to be pushed to the target too
                    // Once libs are copied into app/src/main/jniLibs directory,
                    // Android Studio will pack them into APK's lib/ directory
                    // Here we like to avoid another duplication by pointing
                    // to the files that containing our libs' distribution location
                    // so the same file is used by compiler at host, also packed
                    // into APk to be used at Target (phone/tablet)
                    source {
                        srcDir "./src/main/libs"
                    }
                }
            }
        }
        //ndk {
            //moduleName = 'CameraRtmp'
            //toolchain = 'clang'
            //stl = 'gnustl_static'
            //cppFlags.addAll(['-std=c++11','-D__STDC_CONSTANT_MACROS','-D__STDC_LIMIT_MACROS','-D__STDC_FORMAT_MACROS'])
            //ldLibs.addAll(['GLESv2', 'dl', 'log','z'])

            //abiFilters.addAll(['armeabi'])
            //cFlags "-DANDROID_NDK -std=c++11 -fsigned-char -frtti -fexceptions"
            //ldLibs "GLESv2", "dl", "log"
            //ldLibs "EGL","GLESv3","dl","log"
            //stl "stlport_shared"
        //}
        /*
        sources{
            main{
                jni{
                    dependencies{
                        library 'avutil' linkage 'static'
                        library 'avformat' linkage 'static'
                        library 'avcodec' linkage 'static'
                        library 'avdevice' linkage 'static'
                        library 'swresample' linkage 'static'
                        library 'swscale' linkage 'static'
                        library 'avfilter' linkage 'static'
                    }
                }
            }
        }
        */

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file('proguard-android.txt'))
            }
            debug {
              //  jniDebuggable = true
                debuggable = true
            }
        }

        productFlavors {
            create('arm') {
                ndk.abiFilters.add('armeabi')
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //  testcompile "junit:junit:4.12"
    compile 'com.android.support:appcompat-v7:23.0.0'
}